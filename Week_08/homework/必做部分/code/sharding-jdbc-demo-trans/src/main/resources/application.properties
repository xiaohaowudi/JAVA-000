# 水平分库，两个数据源
spring.shardingsphere.datasource.names=ds0,ds1


# 一个实体类对应多个表，允许覆盖
spring.main.allow-bean-definition-overriding=true

# 数据库源信息
spring.shardingsphere.datasource.ds0.jdbcUrl=jdbc:mysql://192.168.3.144:3306/java_camp?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456

spring.shardingsphere.datasource.ds1.jdbcUrl=jdbc:mysql://192.168.3.146:3306/java_camp?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

# 指定水平分库分表的分布情况
spring.shardingsphere.sharding.tables.t_order_base_info.actual-data-nodes=ds$->{0..1}.t_order_base_info_$->{0..15}

# 指定主键生成策略
spring.shardingsphere.sharding.tables.t_order_base_info.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order_base_info.key-generator.type=SNOWFLAKE


# 指定库的分片策略, 根据supplier_user_id卖家id的奇偶性将数据分配到两个库
spring.shardingsphere.sharding.tables.t_order_base_info.database-strategy.inline.sharding-column=supplier_user_id
spring.shardingsphere.sharding.tables.t_order_base_info.database-strategy.inline.algorithm-expression=ds$->{supplier_user_id % 2}

# 指定表的水平分片策略，根据customer_user_id买家的id % 16 的余数分配到16张不同表
spring.shardingsphere.sharding.tables.t_order_base_info.table-strategy.inline.sharding-column=customer_user_id
spring.shardingsphere.sharding.tables.t_order_base_info.table-strategy.inline.algorithm-expression=t_order_base_info_$->{customer_user_id % 16}

# 打开日志
spring.shardingsphere.props.sql.show=true

# mybatis扫描目录
mybatis.mapper-locations=/mybatis/*.xml